#!/usr/bin/env python

"""
Mirror all GitHub repositories for an organization, maintaining metadata.

This can be useful when maintaining a local mirror.
"""

from __future__ import print_function
import itertools
import json
import os
import shutil
import subprocess
import sys
import requests


def repos(org):
    """
    Get all of the repositories for an org.

    :param org: the org to get the repositories for
    :returns: a list of description/url dicts
    """

    for page in itertools.count(start=1):
        res_handle = requests.get(
            "https://api.github.com/orgs/%s/repos?page=%d" % (org, page)
        )
        res_encoding = "utf8"
        res_json = json.loads(res_handle.text.decode(res_encoding))

        if not res_json:
            break

        for repo in res_json:
            yield {
                "description": repo["description"],
                "url":         repo["html_url"],
            }


def repo_already_mirrored(url):
    """
    Check if a repo is already mirrored.

    :param url: the url for the repo
    :returns: a bool denoting whether the dir for this repo exists
    """

    repo_dir = os.path.basename(url) + ".git"
    return os.path.isdir(repo_dir)


def update(repo):
    """
    Update a local mirror.

    :param repo: information about this repo
    """

    repo_dir = os.path.basename(repo["url"]) + ".git"
    subprocess.check_call(["git", "--git-dir", repo_dir, "remote", "update"])
    description(os.path.join(repo_dir, "description"), repo["description"])
    export(os.path.join(repo_dir, "git-daemon-export-ok"))


def mirror(repo):
    """
    Mirror a Git repository, maintaining metadata.

    :param repo: information about the repo to mirror
    """

    subprocess.check_call(["git", "clone", "--mirror", repo["url"]])

    repo_dir = os.path.basename(repo["url"]) + ".git"
    description_file = os.path.join(repo_dir, "description")
    export_file = os.path.join(repo_dir, "git-daemon-export-ok")

    description(description_file, repo["description"])
    export(export_file)


def export(export_file):
    """
    Mark a repository as exportable.

    :param export_file: the path to the git-daemon-export-ok file
    """

    open(export_file, "a").close()


def description(description_file, description):
    """
    Update a description file for a git repo.

    :param description_file: the path to the description file
    :param description: the description for this repo
    """

    with open(description_file, "wb") as f:
        if description:
            f.write(description.encode("utf8") + b"\n")
        else:
            f.write("".encode("utf8") + b"\n")

def remotely_deleted_repos(remote_repos):
    """
    Return a list of all repos existing locally, but not remotely.

    :param remote_repos: the names of all repos to check
    """

    files = os.listdir(".")

    local_repos = [x for x in files if x.endswith(".git") and x != ".git"]
    remote_repo_urls = [remote_repo["url"] for remote_repo in remote_repos]
    remote_repos = [url.split("/")[-1] for url in remote_repo_urls]
    return [repo for repo in local_repos if repo not in remote_repos]

def update_or_mirror_repos(org, delete=False):
    """
    For each repo by a org, either update it if it is already mirrored, or
    mirror it.

    :param org: the org to get the repositories for
    :param delete: delete remotely deleted repositories from our local mirror
    """

    org_repos = list(repos(org))

    for repo in org_repos:
        if repo_already_mirrored(repo["url"]):
            update(repo)
        else:
            mirror(repo)

    if delete:
        repos_to_delete = remotely_deleted_repos(org_repos)
        for repo in repos_to_delete:
            shutil.rmtree(repo)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(
            "Usage: %s organization" % os.path.basename(sys.argv[0]),
            file=sys.stderr
        )
        sys.exit(1)

    org = sys.argv[1]
    update_or_mirror_repos(org, delete=False)
